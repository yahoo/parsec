tasks.findByName('release').enabled = false
tasks.findByName('install').enabled = false
tasks.findByName('bintrayUpload').enabled = false
tasks.findByName('publishToMavenLocal').enabled = false

sourceSets {
    integrationTest {
        groovy {
            srcDir 'src/integration-test/groovy'
        }
        java{
            srcDir 'src/integration-test/java'
        }
        resources.srcDir 'src/integration-test/resources'
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestCompile.extendsFrom testRuntime
}

dependencies {
    compile group: 'com.google.code.javaparser' , name: 'javaparser', version: rootProject.property('packageVersion.javaparser')
    compile gradleApi()

    integrationTestCompile group: 'commons-lang'                             , name: 'commons-lang' , version: rootProject.property('packageVersion.commons-lang')
    integrationTestCompile group: 'org.codehaus.groovy.modules.http-builder' , name: 'http-builder' , version: rootProject.property('packageVersion.http-builder')
    testCompile            group: 'org.apache.commons'                       , name: 'commons-io'   , version: rootProject.property('packageVersion.commons-io')
}


def testDir = new File("$projectDir/sandbox")

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperty "parsec_test.testDir", "$testDir/parsec_sample_webapp"
    outputs.upToDateWhen{ false }
}

task preTestBuild << {
    if (testDir.exists()){
        testDir.deleteDir()
    }
    testDir.mkdirs()
    String resourcePath = new File("${projectDir}/src/integration-test/resources").absolutePath
    def engine = new groovy.text.SimpleTemplateEngine()

    //Create template file for plugin
    def template_file = new File("${resourcePath}/build.gradle.tmpl")
    def binding = ["baseBuildProjectDir": "${project(":parsec-base-build").projectDir.absolutePath}",
                   "parsecGradleVersion": "${project(":parsec-gradle-plugin").version}"]
    def template = engine.createTemplate(template_file).make(binding)
    new File("${testDir.absolutePath}/build.gradle.tmpl").write(template.toString())

    //Create build.gradle file
    def build_file = new File("${resourcePath}/build.gradle")
    def binding2 = ["parsecTemplateVersion" : "${project(":parsec-template-plugin").version}",
                    "grettyVersion": "${project.property("packageVersion.gretty")}"]
    def template2 = engine.createTemplate(build_file).make(binding2)
    new File("${testDir.absolutePath}/build.gradle").write(template2.toString())

    //Create process
    def command = ["sh", projectDir.absolutePath + "/before_test_build.sh", testDir.absolutePath, projectDir.absolutePath]
    def process = new ProcessBuilder(command).directory(projectDir).redirectErrorStream(true).start()
    process.inputStream.eachLine {println it}
    process.waitForOrKill(120000) //Wait for 2 mins or kill process regardless
    if(process.exitValue() == 0){
        process.destroy() //Note that Jetty is still running at this point
    } else {
        throw new GradleException("Starting jetty fail")
    }
}

task postTestBuild(type: Exec){
    workingDir = "${projectDir}/sandbox/parsec_sample_webapp"
    commandLine 'gradle', 'appAfterIntegrationTest', '-Pprofile=it'

    if(project.properties['deleteSandbox']=='true'){
        testDir.deleteDir()
    }
}

tasks.withType(Test){
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

preTestBuild.dependsOn parent.subprojects.install
integrationTest.dependsOn preTestBuild
//integrationTest.mustRunAfter parent.subprojects.test
integrationTest.finalizedBy postTestBuild
check.dependsOn integrationTest
